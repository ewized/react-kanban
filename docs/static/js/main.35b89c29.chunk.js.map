{"version":3,"sources":["Card.js","Col.js","App.js","serviceWorker.js","index.js"],"names":["styles","card","backgroundColor","margin","padding","arrow","fontSize","textDecoration","background","border","onLeft","onRight","children","style","onClick","float","href","col","flex","minWidth","header","color","textAlign","link","addCard","app","display","height","overflow","localStorage","getItem","setItem","JSON","stringify","state","kanban","parse","cards","value","this","setState","map","cardIndex","index","filter","c","i","removeCard","Col","prompt","key","Card","moveRight","moveLeft","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i0BAEA,IAAMA,EAAS,CACbC,KAAM,CACJC,gBAAiB,OACjBC,OAAQ,MACRC,QAAS,OAEXC,MAAO,CACLC,SAAU,OACVF,QAAS,MACTG,eAAgB,OAChBC,WAAY,OACZC,OAAQ,SAIG,kBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,SAApB,OACb,yBAAKC,MAAOb,EAAOC,MAChBS,GAAU,4BAAQG,MAAOb,EAAOK,MAAOS,QAASJ,GAAS,KAC1D,8BAAOE,GACND,GAAW,4BAAQE,MAAK,KAAOb,EAAOK,MAAd,CAAqBU,MAAO,UAAWC,KAAK,IAAIF,QAASH,GAAU,O,yjBClBhG,IAAMX,EAAS,CACbiB,IAAK,CACHC,KAAM,EACNf,OAAQ,OACRgB,SAAU,SAEZC,OAAQ,CACNjB,OAAQ,MACRC,QAAS,MACTE,SAAU,OACVe,MAAO,OACPC,UAAW,UAEbC,KAAM,CACJf,WAAY,OACZC,OAAQ,SAIG,sBAAGW,cAAH,MAAY,QAAZ,MAAqBC,aAArB,MAA6B,OAA7B,EAAqCG,EAArC,EAAqCA,QAAUZ,EAA/C,EAA+CA,SAA/C,OACb,yBAAKC,MAAOb,EAAOiB,KACjB,wBAAIJ,MAAK,KAAOb,EAAOoB,OAAd,CAAsBlB,gBAAiBmB,KAAUD,GAC1D,6BACGR,GAEH,4BAAQC,MAAOb,EAAOuB,KAAMT,QAASU,GAArC,gBCxBExB,EAAS,CACbyB,IAAK,CACHC,QAAS,OACTxB,gBAAiB,OACjByB,OAAQ,QACRC,SAAU,W,cAMZ,aAAe,IAAD,6BACZ,8CAEKC,aAAaC,QAAQ,WACxBD,aAAaE,QAAQ,SAAUC,KAAKC,UAAU,CAAC,CAC3Cb,OAAQ,SACRC,MAAO,WAET,CACED,OAAQ,QACRC,MAAO,WAET,CACED,OAAQ,OACRC,MAAO,WAET,CACED,OAAQ,MACRC,MAAO,cAGRQ,aAAaC,QAAQ,UACxBD,aAAaE,QAAQ,QAASC,KAAKC,UAAU,CAAC,CAAC,SAAU,CAAC,OAAQ,CAAC,OAAQ,OAAQ,CAAC,OAAQ,MAAO,WAErG,EAAKC,MAAQ,CACXC,OAAQH,KAAKI,MAAMP,aAAaC,QAAQ,WACxCO,MAAOL,KAAKI,MAAMP,aAAaC,QAAQ,WA1B7B,E,qEA8BNb,GAAsB,IAAD,OAAhBqB,EAAgB,uDAAR,OACnBC,KAAKC,UAAS,kBAAgB,CAAEH,MAAlB,EAAGA,MAA4BI,KAAI,SAACxC,EAAMyC,GAAP,OAAqBA,IAAczB,EAAd,sBAA0BhB,GAA1B,CAAgCqC,IAAYrC,SAAU,kBAAM4B,aAAaE,QAAQ,QAASC,KAAKC,UAAU,EAAKC,MAAMG,a,iCAIjLpB,EAAK0B,GAAQ,IAAD,OACrBJ,KAAKC,UAAS,kBAAgB,CAAEH,MAAlB,EAAGA,MAA4BI,KAAI,SAACxC,EAAMyC,GAAP,OAAqBA,IAAczB,EAAMhB,EAAK2C,QAAO,SAACC,EAAGC,GAAJ,OAAUA,IAAMH,KAAS1C,SAAU,kBAAM4B,aAAaE,QAAQ,QAASC,KAAKC,UAAU,EAAKC,MAAMG,WACvMR,aAAaE,QAAQ,QAASC,KAAKC,UAAUM,KAAKL,MAAMG,U,gCAGhDpB,EAAK0B,GACb,IAAI1C,EAAOsC,KAAKL,MAAMG,MAAMpB,GAAK0B,GACjCJ,KAAKQ,WAAW9B,EAAK0B,GACjBJ,KAAKL,MAAMG,MAAMpB,EAAM,IACzBsB,KAAKf,QAAQP,EAAM,EAAGhB,K,+BAIjBgB,EAAK0B,GACZ,IAAI1C,EAAOsC,KAAKL,MAAMG,MAAMpB,GAAK0B,GACjCJ,KAAKQ,WAAW9B,EAAK0B,GACjBJ,KAAKL,MAAMG,MAAMpB,EAAM,IACzBsB,KAAKf,QAAQP,EAAM,EAAGhB,K,+BAIhB,IAAD,OACP,OACE,yBAAKY,MAAOb,EAAOyB,KAChBc,KAAKL,MAAMC,OAAOM,KAAI,SAACN,EAAQlB,GAAT,OACrB,kBAAC+B,EAAD,iBAASb,EAAT,CAAiBX,QAAS,kBAAM,EAAKA,QAAQP,EAAKgC,OAAO,2BAA2BC,IAAKjC,EAAKJ,MAAOb,EAAOiB,MACzG,EAAKiB,MAAMG,MAAMpB,GAAKwB,KAAI,SAACxC,EAAM0C,GAAP,OAAiB,kBAACQ,EAAD,CAAMD,IAAKP,EAAOhC,QAAS,EAAKuB,MAAMG,MAAMpB,EAAM,GAAK,kBAAM,EAAKmC,UAAUnC,EAAK0B,IAAS,KAAMjC,OAAQ,EAAKwB,MAAMG,MAAMpB,EAAM,GAAK,kBAAM,EAAKoC,SAASpC,EAAK0B,IAAS,MAAO1C,e,GA9DxMqD,aCFTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.35b89c29.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst styles = {\r\n  card: {\r\n    backgroundColor: '#fff',\r\n    margin: '5px',\r\n    padding: '5px',\r\n  },\r\n  arrow: {\r\n    fontSize: 'bold',\r\n    padding: '5px',\r\n    textDecoration: 'none',\r\n    background: 'none',\r\n    border: 'none',\r\n  }\r\n}\r\n\r\nexport default ({ onLeft, onRight, children }) => (\r\n  <div style={styles.card}>\r\n    {onLeft && <button style={styles.arrow} onClick={onLeft}>{'<'}</button>}\r\n    <span>{children}</span>\r\n    {onRight && <button style={{ ...styles.arrow, float: 'right' }} href=\"#\" onClick={onRight}>{'>'}</button>}\r\n  </div>\r\n);\r\n","import React, { Component } from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst styles = {\r\n  col: {\r\n    flex: 1,\r\n    margin: '10px',\r\n    minWidth: '200px',\r\n  },\r\n  header: {\r\n    margin: '5px',\r\n    padding: '5px',\r\n    fontSize: '18px',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n  },\r\n  link: {\r\n    background: 'none',\r\n    border: 'none',\r\n  }\r\n}\r\n\r\nexport default ({ header = 'empty', color = '#567', addCard , children }) => (\r\n  <div style={styles.col}>\r\n    <h1 style={{ ...styles.header, backgroundColor: color }}>{header}</h1>\r\n    <div>\r\n      {children}\r\n    </div>\r\n    <button style={styles.link} onClick={addCard}>+ Add card</button>\r\n  </div>\r\n)\r\n","import React, { Component } from 'react';\nimport Col from './Col.js';\nimport Card from './Card.js'\n\nconst styles = {\n  app: {\n    display: 'flex',\n    backgroundColor: '#eee',\n    height: '100vh',\n    overflow: 'scroll'\n    //flexWrap: 'wrap',\n  },\n};\n\nexport default class extends Component {\n  constructor() {\n    super()\n    // if local storage is none\n    if (!localStorage.getItem('kanban')) {\n      localStorage.setItem('kanban', JSON.stringify([{\n          header: 'Charly',\n          color: '#8e6e95',\n        },\n        {\n          header: 'Nancy',\n          color: '#39a59c',\n        },\n        {\n          header: 'Josh',\n          color: '#344759',\n        },\n        {\n          header: 'Bob',\n          color: '#e8741e',\n        }]))\n    }\n    if (!localStorage.getItem('cards')) {\n      localStorage.setItem('cards', JSON.stringify([['nancy'], ['cow'], ['drew', 'bob'], ['done', 'pid', 'kill']]))\n    }\n    this.state = {\n      kanban: JSON.parse(localStorage.getItem('kanban')),\n      cards: JSON.parse(localStorage.getItem('cards')),\n    }\n  }\n\n  addCard(col, value = 'test') {\n    this.setState(({ cards }) => ({ cards: cards.map((card, cardIndex) => cardIndex === col ? ([ ...card, value ]) : (card))}), () => localStorage.setItem('cards', JSON.stringify(this.state.cards)))\n\n  }\n\n  removeCard(col, index) {\n    this.setState(({ cards }) => ({ cards: cards.map((card, cardIndex) => cardIndex === col ? card.filter((c, i) => i !== index) : card )}), () => localStorage.setItem('cards', JSON.stringify(this.state.cards)))\n    localStorage.setItem('cards', JSON.stringify(this.state.cards))\n  }\n\n  moveRight(col, index) {\n    let card = this.state.cards[col][index];\n    this.removeCard(col, index);\n    if (this.state.cards[col + 1]) {\n      this.addCard(col + 1, card)\n    }\n  }\n\n  moveLeft(col, index) {\n    let card = this.state.cards[col][index];\n    this.removeCard(col, index);\n    if (this.state.cards[col - 1]) {\n      this.addCard(col - 1, card)\n    }\n  }\n\n  render() {\n    return (\n      <div style={styles.app}>\n        {this.state.kanban.map((kanban, col) => (\n          <Col {...kanban} addCard={() => this.addCard(col, prompt('Enter new kanban item'))} key={col} style={styles.col}>\n            {this.state.cards[col].map((card, index) => <Card key={index} onRight={this.state.cards[col + 1] ? () => this.moveRight(col, index) : null} onLeft={this.state.cards[col - 1] ? () => this.moveLeft(col, index) : null}>{card}</Card>)}\n          </Col>\n        ))}\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}